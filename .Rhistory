head(temp2)
biobank %>%
filter(Study_ID %in% temp$Study_ID) %>%
filter(Type == "SER") %>%
group_by(Study_ID) %>%
sort(Visit_no) -> temp2
biobank %>%
filter(Study_ID %in% temp$Study_ID) %>%
filter(Type == "SER") %>%
group_by(Study_ID) %>%
sort(Visit_no) -> temp2
biobank %>%
filter(Study_ID %in% temp$Study_ID) %>%
filter(Type == "SER") %>%
group_by(Study_ID) %>%
arrange(Visit_no) -> temp2
head(temp2)
head(temp2)
biobank %>%
filter(Study_ID %in% temp$Study_ID) %>%
filter(Type == "SER") %>%
group_by(Study_ID) %>%
arrange(c(Study_ID, Visit_no)) -> temp2
biobank %>%
filter(Study_ID %in% temp$Study_ID) %>%
filter(Type == "SER") %>%
# group_by(Study_ID) %>%
arrange(Study_ID, Visit_no) -> temp2
head(temp2)
dim(temp2)
biobank %>%
filter(Study_ID %in% temp$Study_ID) %>%
filter(Type == "SER") %>%
arrange(Study_ID, Visit_no, Sample_no) -> temp2
head(temp2)
temp2 %>%
group_by(Study_ID, Provider_Ocode, Visit_no) %>%
nest() -> temp3
head(temp3)
extract_first_row = function(x){
return[1,]
}
temp3$data[1]
extract_first_row_col = function(x){
return[1,1]
}
temp2 %>%
group_by(Study_ID, Provider_Ocode, Visit_no) %>%
nest() %>%
mutate(Sample_Bcode = map(data, ~extract_first_row(.x))) -> temp3
extract_first_row_col = function(x){
return[1,1]
}
temp2 %>%
group_by(Study_ID, Provider_Ocode, Visit_no) %>%
nest() %>%
mutate(Sample_Bcode = map(data, ~extract_first_row(.x))) -> temp3
temp2 %>%
group_by(Study_ID, Provider_Ocode, Visit_no) %>%
nest() %>%
mutate(Sample_Bcode = map(data, ~extract_first_row_col(.x))) -> temp3
extract_first_row_col = function(x){
return[1,1]
}
temp2 %>%
group_by(Study_ID, Provider_Ocode, Visit_no) %>%
nest() %>%
mutate(Sample_Bcode = map(data, ~extract_first_row_col(.x))) -> temp3
temp2 %>%
group_by(Study_ID, Provider_Ocode, Visit_no) %>%
nest() %>%
mutate(Sample_Bcode = map(data, ~extract_first_row_col(unlist(.x)))) -> temp3
extract_first_row_col = function(x){
return x[1,1]
extract_first_row_col = function(x){
x[1,1]
}
temp2 %>%
group_by(Study_ID, Provider_Ocode, Visit_no) %>%
nest() %>%
mutate(Sample_Bcode = map(data, ~extract_first_row_col(.x))) -> temp3
head(temp3)
temp2 %>%
group_by(Study_ID, Provider_Ocode, Visit_no) %>%
nest() %>%
mutate(Sample_Bcode = map_chr(data, ~extract_first_row_col(.x))) %>%
-> temp3
temp2 %>%
group_by(Study_ID, Provider_Ocode, Visit_no) %>%
nest() %>%
mutate(Sample_Bcode = map_chr(data, ~extract_first_row_col(.x)))-> temp3
temp2 %>%
group_by(Study_ID, Provider_Ocode, Visit_no) %>%
nest() %>%
mutate(Sample_Bcode = map(data, ~extract_first_row_col(.x))) -> temp3
head(temp3)
temp2 %>%
group_by(Study_ID, Provider_Ocode, Visit_no) %>%
nest() %>%
mutate(Sample_Bcode = map(data, ~extract_first_row_col(.x))) %>%
select(-data) %>%
unnest(Sample_Bcode) -> temp3
head(temp3)
dim(temmp3)
dim(temp3)
biobank_longitudinal_serum = temp3
biobank_longi_serum = temp3
write.csv(biobank_longi_serum, "biomarker_serum_longi_2orMore.csv", quote = F, row.names = F)
q()
x <- 4
x
y = 3
x + y
q()
q()
library(gapminder)
library(tidyverse)
euro = gapminder %>%
filter(continent == "Europe", year == 1952)
euro %>%
ggplot(aes(x = gdpPercap, y = lifeExp)) +
geom_point()
cor.test(euro$gdpPercap, euro$lifeExp)
lm_euro = lm(data = euro, lifeExp~gdpPercap)
summary(lm_euro)
confint(lm_euro$coefficients)
confint(lm_euro)
confint(lm_euro)
head(gapminder)
#
gapminder %>%
nest(country) -> temp
#
gapminder %>%
group_by(country) %>%
nest() -> temp
temp
temp$data
temp$data[1]
class(temp$data[1])
class(temp$data[[1])
class(temp$data[[1]])
#
gapminder %>%
group_by(country) %>%
nest() %>%
mutate(lmod = map(.x = data, .f = lm(lifeExp ~ gdpPercap, data = .x))) -> temp
#
gapminder %>%
group_by(country) %>%
nest() %>%
mutate(lmod = map(data, ~lm(lifeExp ~ gdpPercap, data = .x))) -> temp
?map
map
tmep
temp
#
gapminder %>%
group_by(country) %>%
nest() %>%
mutate(lmod = map(data, ~lm(lifeExp ~ gdpPercap, data = .x))) -> temp
temp
temp$lmod[[1]]
tidy(temp$lmod[[1]])
library(broom)
tidy(temp$lmod[[1]])
glance(temp$lmod[[1]])
?tidy
#
gapminder %>%
group_by(country) %>%
nest() %>%
mutate(lmod = map(data, ~lm(lifeExp ~ gdpPercap, data = .x))) %>%
mutate(est = map(lmod, ~tidy(.x))) -> temp
temp
temp$est[[1]]
#
gapminder %>%
group_by(country) %>%
nest() %>%
mutate(lmod = map(data, ~lm(lifeExp ~ gdpPercap, data = .x))) %>%
mutate(est = map(lmod, ~tidy(.x))) %>%
unnest(est) -> temp
temp
#
gapminder %>%
group_by(country) %>%
nest() %>%
mutate(lmod = map(data, ~lm(lifeExp ~ gdpPercap, data = .x))) %>%
mutate(est = map(lmod, ~tidy(.x))) %>%
unnest(est) %>%
filter(term == "gdpPercap") -> temp
tepm
temp
#
gapminder %>%
group_by(country) %>%
nest() %>%
mutate(lmod = map(data, ~lm(lifeExp ~ gdpPercap, data = .x))) %>%
mutate(est = map(lmod, ~tidy(.x))) %>%
unnest(est) %>%
filter(term == "gdpPercap") %>%
select(country, estimate) -> temp
temp
gapminder %>%
group_by(country) %>%
nest() %>%
mutate(lmod = map(data, ~lm(lifeExp ~ gdpPercap, data = .x))) %>%
mutate(param = map(lmod, ~tidy(.x))) %>%
mutate(fit = map(lmod, ~glance(.x))) %>%
unnest(param) %>%
filter(term == "gdpPercap") %>%
select(country, estimate) -> temp
temp
gapminder %>%
group_by(country) %>%
nest() %>%
mutate(lmod = map(data, ~lm(lifeExp ~ gdpPercap, data = .x))) %>%
mutate(param = map(lmod, ~tidy(.x))) %>%
mutate(fit = map(lmod, ~glance(.x))) %>%
unnest(param) %>%
filter(term == "gdpPercap") %>%
select(country, estimate, fit) -> temp
temp
gapminder %>%
group_by(country) %>%
nest() %>%
mutate(lmod = map(data, ~lm(lifeExp ~ gdpPercap, data = .x))) %>%
mutate(param = map(lmod, ~tidy(.x))) %>%
mutate(fit = map(lmod, ~glance(.x))) %>%
unnest(param) %>%
filter(term == "gdpPercap") %>%
unnest(fit) -> temp
gapminder %>%
group_by(country) %>%
nest() %>%
mutate(lmod = map(data, ~lm(lifeExp ~ gdpPercap, data = .x))) %>%
mutate(param = map(lmod, ~tidy(.x))) %>%
mutate(fit = map(lmod, ~glance(.x))) %>%
unnest(param) %>%
filter(term == "gdpPercap") %>%
unnest(fit) -> temp
gapminder %>%
group_by(country) %>%
nest() %>%
mutate(lmod = map(data, ~lm(lifeExp ~ gdpPercap, data = .x))) %>%
mutate(param = map(lmod, ~tidy(.x))) %>%
mutate(fit = map(lmod, ~glance(.x))) %>%
unnest(param) %>%
filter(term == "gdpPercap") %>%
unnest(fit) %>%
select(country, estimate, r.squared) -> temp
gapminder %>%
group_by(country) %>%
nest() %>%
mutate(lmod = map(data, ~lm(lifeExp ~ gdpPercap, data = .x))) %>%
mutate(param = map(lmod, ~tidy(.x))) %>%
mutate(fit = map(lmod, ~glance(.x))) %>%
unnest(param) %>%
filter(term == "gdpPercap") %>%
select(country, estimate, fit) %>%
unnest(fit) -> temp
temp
gapminder %>%
group_by(country) %>%
nest() %>%
mutate(lmod = map(data, ~lm(lifeExp ~ gdpPercap, data = .x))) %>%
mutate(param = map(lmod, ~tidy(.x))) %>%
mutate(fit = map(lmod, ~glance(.x))) %>%
unnest(param) %>%
filter(term == "gdpPercap") %>%
unnest(fit) %>%
select(country, estimate, r.squared) -> temp
gapminder %>%
group_by(country) %>%
nest() %>%
mutate(lmod = map(data, ~lm(lifeExp ~ gdpPercap, data = .x))) %>%
mutate(fit = map(lmod, ~glance(.x))) %>%
unnest(fit) %>%
select(country, estimate, r.squared) -> temp
gapminder %>%
group_by(country) %>%
nest() %>%
mutate(lmod = map(data, ~lm(lifeExp ~ gdpPercap, data = .x))) %>%
mutate(fit = map(lmod, ~glance(.x))) %>%
unnest(fit) %>%
select(country, r.squared) -> temp
temp
gapminder %>%
group_by(country) %>%
nest() %>%
mutate(lmod = map(data, ~lm(lifeExp ~ gdpPercap, data = .x))) %>%
mutate(fit = map(lmod, ~glance(.x))) %>%
unnest(fit) %>%
select(country, r.squared) %>%
slice_max(r.squared, 10)
gapminder %>%
group_by(country) %>%
nest() %>%
mutate(lmod = map(data, ~lm(lifeExp ~ gdpPercap, data = .x))) %>%
mutate(fit = map(lmod, ~glance(.x))) %>%
unnest(fit) %>%
select(country, r.squared) %>%
slice_max(r.squared, n=10)
lm_fit = gapminder %>%
group_by(country) %>%
nest() %>%
mutate(lmod = map(data, ~lm(lifeExp ~ gdpPercap, data = .x))) %>%
mutate(fit = map(lmod, ~glance(.x))) %>%
unnest(fit) %>%
select(country, r.squared)
lm_fit %>%
slice_max(r.squared, n=10)
lm_fit %>%
slice_min(r.squared, n=10)
?slice_max
lm_fit %>%
arrange(r.squared)
lm_fit %>%
arrange(desc(r.squared))
# linear mixed effects model
library(lmer)
install.packages("lmer")
# linear mixed effects model
library(lme4)
install.packages("lme4")
# linear mixed effects model
library(lme4)
lme_mod = lmer(lifeExp ~ gdpPercap + year + (1/continent))
lme_mod = lmer(lifeExp ~ gdpPercap + year + (1/continent), data = gapminder)
lme_mod = lmer(lifeExp ~ gdpPercap + year + (1|continent), data = gapminder)
summary(lme_mod)
str(gapminder)
lme_mod = lmer(lifeExp ~ gdpPercap + year + (1+gdpPercap+year|continent), data = gapminder)
summary(lme_mod)
lme_mod = lmer(lifeExp ~ gdpPercap + (1|year) + (1|continent), data = gapminder)
summary(lme_mod)
lme_mod = lmer(lifeExp ~ gdpPercap + (1|year) + (1|continent), data = gapminder)
summary(lme_mod)
# a linear regression model that uses gdpPercap to predict lifeExp, controlling for by-year and by-continent variability
summary(lme_mod)
lme_mod = lmer(lifeExp ~ gdpPercap + year + (1|continent), data = gapminder)
# a linear regression model that uses gdpPercap to predict lifeExp, controlling for by-year and by-continent variability
summary(lme_mod)
lme_mod = lmer(lifeExp ~ gdpPercap + year, data = gapminder)
lme_mod = lmer(lifeExp ~ gdpPercap + year + (1|continent), data = gapminder)
# a linear regression model that uses gdpPercap to predict lifeExp, controlling for by-continent variability
summary(lme_mod)
lme_mod = lmer(lifeExp ~ gdpPercap + year + (1+gpdPercap|continent), data = gapminder)
lme_mod = lmer(lifeExp ~ gdpPercap + year + (1+gdpPercap|continent), data = gapminder)
lme_mod = lmer(lifeExp ~ gdpPercap + year + (1+gdpPercap|continent), data = gapminder)
lme_mod = lmer(lifeExp ~ gdpPercap + year + (1 +  gdpPercap|continent), data = gapminder)
lme_mod = lmer(lifeExp ~ gdpPercap + year + (1 +  year|continent), data = gapminder)
lme_mod = lmer(lifeExp ~ gdpPercap + year + (1|continent), data = gapminder)
lme_mod = lmer(lifeExp ~ gdpPercap + year + (1|continent) + (1|country), data = gapminder)
# a linear regression model that uses gdpPercap to predict lifeExp, controlling for by-continent variability
summary(lme_mod)
lme_mod2 = lmer(lifeExp ~ year + (1|continent) + (1|country), data = gapminder)
anova(lme_mod, lme_mod2)
lme_mod = lmer(lifeExp ~ gdpPercap + year + continent + (1|country), data = gapminder)
lme_mod2 = lmer(lifeExp ~ year + continent + (1|country), data = gapminder)
anova(lme_mod, lme_mod2)
# a linear regression model that uses gdpPercap to predict lifeExp, controlling for by-continent variability
summary(lme_mod)
lme_mod2 = lmer(lifeExp ~ year + (1|continent), data = gapminder)
anova(lme_mod, lme_mod2)
gapminder %>%
ggplot(aes(gpdPercap, lifeExp)) +
geom_point() +
facet_wrap(~continent)
gapminder %>%
ggplot(aes(gdpPercap, lifeExp)) +
geom_point() +
facet_wrap(~continent)
gapminder %>%
ggplot(aes(gdpPercap, lifeExp)) +
geom_point() +
facet_wrap(~year)
gapminder %>%
ggplot(aes(continent, lifeExp)) +
geom_boxplot()
gapminder %>%
ggplot(aes(year, lifeExp)) +
geom_boxplot()
gapminder %>%
ggplot(aes(year, lifeExp)) +
geom_boxplot()
gapminder %>%
ggplot(aes(factor(year), lifeExp)) +
geom_boxplot()
lme_mod = lmer(lifeExp ~ gdpPercap + year + (1+gdpPercap|continent), data = gapminder)
lme_mod = lmer(lifeExp ~ gdpPercap + year + (1|continent), data = gapminder)
lme_mod2 = lmer(lifeExp ~ year + (1|continent), data = gapminder, REML = FALSE)
anova(lme_mod, lme_mod2)
lme_mod = lmer(lifeExp ~ gdpPercap + year + (1|continent), data = gapminder, REML = FALSE)
# a linear regression model that uses gdpPercap to predict lifeExp, controlling for by-continent variability
summary(lme_mod)
lme_mod2 = lmer(lifeExp ~ year + (1|continent), data = gapminder, REML = FALSE)
q()
reticulate::repl_python()
result
yes
reticulate::source_python('~/Desktop/floyd.py')
result
reticulate::repl_python()
reticulate::repl_python()
reticulate::source_python('~/Desktop/floyd.py')
result
graph
INF
q()
setwd("~/Dropbox/Github/datamed")
library(ISLR) # NCI60 data in this package
install.packages("ISLR")
library(ISLR) # NCI60 data in this package
class(NCI60)
nci.labs = NCI60$labs
head(nci.labs)
dim(nci.labs)
nci.data = NCI60$data
head(nci.data)
class(nci.data)
dim(nci.data)
class(nci.labs)
length(nci.labs)
length(unique(nci.labs))
?prcomp
library(ggplot2)
nci_pc_out = prcomp(nci.data, scale = TRUE) # scaling is done by dividing the (centered) columns of x by their standard deviations
?prcomp
class(nci_pc_out)
nci_pc_out
head(nci_pc_out)
pr = nci_pc_out$x
dim(pr)
pr[1:5, 1:5]
dim(pr)
pr[1:5, ]
nci_pc_out$rotation
dim(nci_pc_out$rotation)
out = prcomp(nci.data, scale = TRUE)
dim(out$rotation)
out$rotation[1:5, 1:5]
pc12scores = nci_pc_out$x[,c("PC1", "PC2")]
df = data.frame(cell_lines = nci.labs, pc12scores)
ggplot(data = df, aes(x=PC1, y=PC2, col = cell_lines)) + geom_point(size = 3)
dim(out$sdev)
length(out$sdev)
sum(out$sdev)
out = prcomp(nci.data, scale = TRUE)
library(ggplot2)
pr = out$x
dim(pr) # 64 samples, 64 principal components
pc12scores = pr[,c("PC1", "PC2")]
df = data.frame(cell_lines = nci.labs, pc12scores)
ggplot(data = df, aes(x=PC1, y=PC2, col = cell_lines)) + geom_point(size = 3)
df = read.csv("data/breast_cancer_wisconsin.csv")
head(df)
dim(df)
summary(df)
df = read.csv("data/wisconsin_breast_cancer.csv")
dim(df)
head(df)
df = read.csv("data/wisconsin_breast_cancer.csv")
dim(df)
df = read.csv("data/wisconsin_breast_cancer.csv")
dim(df)
head(df)
feature = df[,3:12]
dx = df$diagnosis
pca = prcomp(feature, scale = T)
result = pca$x
head(result)
dim(result)
head(result)
sub = result[,1:2]
pc12 = result[,1:2]
df2 = data.frame(diagnosis = dx, pc12)
df12 = data.frame(diagnosis = dx, pc12)
ggplot(data = df12, aes(x = PC1, y = PC2, col = diagnosis)) + geom_point()
df = read.csv("data/wisconsin_breast_cancer.csv")
# 주성분 분석을 한 변수 데이터만 분리
feature = df[,3:12] # 1,2 열은 각각 환자 ID, 진단(B: 양성, M:악성)
# 주성분 분석
pca = prcomp(feature, scale = T) # 변수 값을 표준화(평균을 빼고, 표준편차로 나누어줌)
result = pca$x # 각 환자별 주성분(PC1, PC2, ... PC10) 값
# 시각화
pc12 = result[,1:2] # PC1, PC2 선택
df12 = data.frame(diagnosis = df$diagnosis, pc12)
ggplot(data = df12, aes(x = PC1, y = PC2, col = diagnosis)) + geom_point()
library(ggplot2)
df = read.csv("data/wisconsin_breast_cancer.csv")
head(df)
# 주성분 분석을 한 변수 데이터만 분리
feature = df[,3:12] # 1,2 열은 각각 환자 ID, 진단(B: 양성, M:악성)
head(feature)
# 주성분 분석
pca = prcomp(feature, scale = T) # 변수 값을 표준화(평균을 빼고, 표준편차로 나누어줌)
class(pca)
pca
# 주성분 분석
pca = prcomp(feature, scale = T) # 변수 값을 표준화(평균을 빼고, 표준편차로 나누어줌)
result = pca$x # 각 환자별 주성분(PC1, PC2, ... PC10) 값
head(result)
dim(result)
# 시각화
pc12 = result[,1:2] # PC1, PC2 선택
ggplot(data = df12, aes(x = PC1, y = PC2, col = diagnosis)) + geom_point()
df12 = data.frame(diagnosis = df$diagnosis, pc12)
head(df12)
ggplot(data = df12, aes(x = PC1, y = PC2, col = diagnosis)) + geom_point()
q()
