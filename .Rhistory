x = c(1:10)
df = data.frame(m)
df
f = c("a","b","c","b","a")
class(f)
fac = factor(f)
fac
f
class(fac)
levels(fac)
lst = list(number = c(73,77,90),
name = c("신동원", "신지율","양효창"),
sex = c("M","F","M"))
lst
lst = list(number = c(73,77,90, 93),
name = c("신동원", "신지율","양효창"),
sex = c("M","F","M"))
df3 = data.frame(lst)
lst = list(number = c(73,77,90),
name = c("신동원", "신지율","양효창"),
sex = c("M","F","M"))
df3 = data.frame(lst)
df3
clear()
cl()
library(gapminder)
head(gapminder)
str(gapminder)
summary(gapminder)
library(dplyr)
africa = gapminder %>%
filter(continent == "Africa")
mean(africa$lifeExp)
asia = gapminder %>%
filter(continent == "Asia")
mean(asia$lifeExp)
df = gapminder %>%
select(continent, lifeExp)
df
length(unique(asia$country))
levels(asia$country)
asia$country = factor(asia$country)
levels(asia$country)
unique(c(1,1,1,2,3))
gapminder %>%
group_by(year) %>%
summarise(mean_lifeExp = mean(lifeExp))
gapminder %>%
group_by(year, continent) %>%
summarise(mean_lifeExp = mean(lifeExp))
library(ggplot2)
gapminder %>%
ggplot(aes(x = gdpPercap, y = lifeExp)) +
geom_point()
gapminder %>%
ggplot(aes(x = gdpPercap, y = lifeExp)) +
geom_point() +
scale_x_log10()
gapminder
gapminder %>%
ggplot(aes(x = gdpPercap, y = lifeExp, size = pop)) +
geom_point() +
scale_x_log10()
gapminder %>%
ggplot(aes(x = gdpPercap, y = lifeExp, size = pop)) +
geom_point(alpha = 0.3) +
scale_x_log10()
gapminder %>%
ggplot(aes(x=continent, y= lifeExp)) +
geom_boxplot()
q()
3**2
3^2
my_vec = c(2, 4, 6, 8)
my_vec[my_vec %in% c(1, 2, 5)]
vec = c(1,2,3,1,1,2,3)
fvec = factor(vec, labels = c("mild", "moderate", "severe"))
fvec
mon = c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
fmon1 = factor(mon)
fmon1
fmon2 = factor(mon, levels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"))
fmon2
mon = c("Jan", "Feb", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
fmon = factor(mon, levels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"))
fmon
rep(8, 88)
rep(8, 88)
x = rep(1:3, times=3)
ᆨ
x
measures_of_center <- function(x){
c(mean = mean(x), median = median(x))
}
vectors <- list(
A = c(9, 1, 8, 4, 3),
B = c(7,  3,  4,  4,  1,  1, 10,  8)
)
measures_of_center(vectors)
map(vectors, measures_of_center)
map(vectors, measures_of_center)
library(dplyr)
map(vectors, measures_of_center)
measures_of_center <- function(x){
c(mean = mean(x), median = median(x))
}
vectors <- list(
A = c(9, 1, 8, 4, 3),
B = c(7,  3,  4,  4,  1,  1, 10,  8)
)
map(vectors, measures_of_center)
map(vectors, measures_of_center())
library(purrr)
map(vectors, measures_of_center)
lapply(vectors, mean)
tapply(vectors, median)
tapply(vectors, mean)
sapply(vectors, mean)
vapply(vectors, mean)
q()
my_vec = c(2, 4, 6, 8)
my_vec[my_vec %in% c(1, 2, 5)]
my_vec %in% c(1, 2, 5)
my_vec[c(1,3)]
vec = c(1,2,3,1,1,2,3)
vec
fvec = factor(vec)
fvec
fvec = factor(vec, levels = c("mild", "moderate", "severe")
q
fvec
fvec = factor(vec, levels = c("mild", "moderate", "severe")
fvec = factor(vec, levels = c("mild", "moderate", "severe"))
fvec
vec = c(1,2,3,1,1,2,3)
fvec = factor(vec, levels = c("mild", "moderate", "severe"))
fvec
vec = c(1,2,3,1,1,2,3)
fvec = factor(vec, labels = c("mild", "moderate", "severe"))
fvec
mon = c("Jan", "Aug", "Apr", "May", "Jun", "Nov", "Dec")
fmon = factor(mon)
mon = c("Jan", "Aug", "Apr", "May", "Jun", "Nov", "Dec")
fmon = factor(mon)
fmon
levels(fmon) = c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Ju
l", "Aug", "Sep", "Oct", "Nov", "Dec")
fmon
season = fmon
levels(season) = list(spring = c("Mar", "Apr", "May"),
summer = c("Jun", "Jul", "Aug"),
autumn = c("Sep", "Oct", "Nov"),
winter = c("Dec", "Jan", "Feb"))
season
lst <- list(v1 = 1:5, v2 = c('a', 'b'))
lst
lst[1]
lst[[1]]
class(lst[1])
class(lst[[1]])
x = 10
ifelse(x %% 2 == 0, "even", "odd")
if(is.numeric(x)){
x ^ 2
} else {
print("error: x must be numeric")
}
if(is.numeric(x)){
y ^ 2
} else {
print("error: x must be numeric")
}
if(is.numeric(y)){
y ^ 2
} else {
print("error: x must be numeric")
}
square <- function(y) {
if(is.numeric(y)){
y ^ 2
} else {
print("error: y must be numeric")
}
q
}
if(is.numeric(y)){
y ^ 2
} else {
print("error: y must be numeric")
}}
if(is.numeric(y)){
y ^ 2
} else {
print("error: y must be numeric")
}}
square <- function(y) {
if (is.numeric(y)) {
y ^ 2
} else {
print("error: y must be numeric")
}
}
square(4)
square("yes")
x <- matrix(1:4, 2, 2)
x <- matrix(1:4, nrow = 2, ncol = 2)
x <- matrix(1:4, 2, 2) # matrix 2 by 2
y <- matrix(rep(10, 4), 2, 2)
x <- matrix(1:4, 2, 2) # matrix 2 by 2
y <- matrix(rep(10, 4), 2, 2)
x
y
x*y
x%*%y
lst <- list(
A = c(9, 1, 8, 4, 3),
B = c(7,  3,  4,  4,  1,  1, 10,  8)
)
lst_mean = lapply(lst, mean)
lst_mean
lst_median = sapply(lst, median)
lst_median
lst_mean = c()
for (i in 1:2) {
lst_mean[i] = mean(lst[[i]])
}
lst_mean
measures_of_center <- function(x){
c(mean = mean(x), median = median(x))
}
library(purrr)
map(lst, measures_of_center)
q()
norm = rnorm(100, mean = 33, sd = 3)
norm
length(norm)
mean(norm)
sd(norm)
norm = rnorm(100, mean = 33, sd = 3)
mean(norm)
sd(norm)
set.seed(1)
norm = rnorm(100, mean = 33, sd = 3)
mean(norm)
norm = rnorm(100, mean = 33, sd = 3)
mean(norm)
norm = rnorm(100, mean = 33, sd = 3)
mean(norm)
set.seed(1)
norm = rnorm(100, mean = 33, sd = 3)
mean(norm)
set.seed(1)
norm = rnorm(100, mean = 33, sd = 3)
mean(norm)
?set.seed
library(ggplot2)
ggplot(movies, aes(duration)) +
geom_boxplot()
??movies
?movies
pnorm(180, mean = 170, sd = 10)
pnorm(160, mean = 170, sd = 10)
?pnorm
dnorm(180, mean = 170, sd = 10)
qnorm(0.5, mean = 170, sd = 10)
qnorm(0.8, mean = 170, sd = 10)
qnorm(0.2, mean = 170, sd = 10)
?sample
sample(1:100, size = 10)
sample(1:100, size = 10)
library(ggplot2)
norm
norm %>%
ggplot(aes(norm)) +
geom_density()
library(dplyr)
norm %>%
ggplot(aes(norm)) +
geom_density()
plot(norm)
density(norm)
plot(density(norm))
df_norm = data.frame(norm)
head(df_norm)
df_norm %>%
ggplot(aes(norm)) +
geom_density()
pnorm(180, mean = 170, sd = 10)
pnorm(160, mean = 170, sd = 10)
qnorm(0.8, mean = 170, sd = 10)
qnorm(0.2, mean = 170, sd = 10)
sample(1:100, size = 10)
samples <- rpois(20, 2)
samples
samples = rbinom(100, 10, prob = 0.5)
samples
?rbinom
plot(density(samples))
pbinom(8, 10, prob = 0.5)
pbinom(5, 10, prob = 0.5)
pbinom(5, 10, prob = 0.5)
pbinom(2, 10, prob = 0.5)
pbinom(6, 10, prob = 0.5)
pbinom(4, 10, prob = 0.5)
pois_sample = rpois(100, 2)
plot(density(pois_sample))
pois_sample = rpois(100, 1)
plot(density(pois_sample))
pois_sample = rpois(100, 5)
plot(density(pois_sample))
pois_sample = rpois(100, 0.2)
plot(density(pois_sample))
pois_sample = rpois(100, 2)
plot(density(pois_sample))
pois_sample = rpois(1000, 20)
plot(density(pois_sample))
pois_sample = rpois(100, 2)
plot(density(pois_sample))
pois_sample
?pnorm
pnorm(190, mean = 170, sd = 10, lower.tail = F)
# 어떤 약물의 치료 성공률이 10% 이다. 환자 100명이 이 약물로 치료를 받았을 때, 5명 이상에서 이 치료 약물이 성공할 확률을 구하시오.
pbinom(5, 100, 0.10)
?pbinom
# 어떤 약물의 치료 성공률이 10% 이다. 환자 100명이 이 약물로 치료를 받았을 때, 5명 이상에서 이 치료 약물이 성공할 확률을 구하시오.
pbinom(5, 100, 0.10, lower.tail = F)
# 어떤 약물의 치료 성공률이 10% 이다. 환자 100명이 이 약물로 치료를 받았을 때, 이 치료 약물이 성공하는 사람이 5명 이하일 확률을 구하시오.
pbinom(5, 100, 0.10)
# 어떤 약물의 치료 성공률이 10% 이다. 환자 100명이 이 약물로 치료를 받았을 때, 이 치료 약물이 성공하는 사람이 10명 이하일 확률을 구하시오.
pbinom(10, 100, 0.10)
?chisq.test
M <- as.table(rbind(c(762, 327, 468), c(484, 239, 477)))
dimnames(M) <- list(gender = c("F", "M"),
party = c("Democrat","Independent", "Republican"))
(Xsq <- chisq.test(M))  # Prints test summary
M
summary(Xsq)
Xsq
Xsq$observed   # observed counts (same as M)
Xsq$expected   # expected counts under the null
Xsq$residuals  # Pearson residuals
Xsq$stdres     # standardized residuals
# 어떤 확률 변수가 평균이 170, 표준편차가 10 인 정규분포를 이루고 있다고 했을 때, 변수 값이 180 보다 클 확률을 구하시오.
pnorm(180, mean = 170, sd = 10, lower.tail = F)
?pnorm
# 위에서 변수 값이 160-180 사이 값을 가질 확률을 구하시오.
pnorm(180, mean = 170, sd = 10) - pnorm(160, mean = 170, sd = 10)
# 위에서 변수 값이 170 보다 작을 확률을 구하시오.
pnorm(190, mean = 170, sd = 10, lower.tail = F)
# 위에서 변수 값이 190 보다 작을 확률을 구하시오.
pnorm(190, mean = 170, sd = 10, lower.tail = F)
# 위에서 변수 값이 190 보다 클 확률을 구하시오.
pnorm(190, mean = 170, sd = 10, lower.tail = F)
# 위에서 80 percentile 에 해당하는 값은 얼마인지 구하시오.
qnorm(0.8, mean = 170, sd = 10)
# 1에서 100까지 자연수 중에서 10개의 수를 무작위로 선택하시오.
sample(1:100, size = 10)
# 1에서 100까지 자연수 중에서 10개의 수를 무작위로 선택하시오.
sample(1:100, size = 10)
# 1에서 100까지 자연수 중에서 10개의 수를 무작위로 선택하시오.
set.seed(42)
sample(1:100, size = 10)
# 1에서 100까지 자연수 중에서 10개의 수를 무작위로 선택하시오.
set.seed(42)
sample(1:100, size = 10)
sample(1:100, size = 10)
# 동전을 100번 던져 앞면이 나오는 횟수가 10 회 이하일 확률은 얼마인가?
samples = rbinom(100, 10, prob = 0.5)
?rbinom
# 동전을 10번 던져 앞면이 나오는 횟수를 확률 변수로 하는 표본을 생성하시오(표본의 크기는 100)
samples = rbinom(100, 10, prob = 0.5)
samples
mean(samples)
sd(samples)
plot(density(samples))
?pbinom
# 어떤 약물의 치료 성공률이 10% 이다. 환자 100명이 이 약물로 치료를 받았을 때, 이 치료 약물이 성공하는 사람이 10명 이상일 확률을 구하시오.
pbinom(q = 10, size = 100, prob = 0.10, lower.tail = F)
# 어떤 약물의 치료 성공률이 10% 이다. 환자 100명이 이 약물로 치료를 받았을 때, 이 치료 약물이 성공하는 사람이 20명 이상일 확률을 구하시오.
pbinom(q = 20, size = 100, prob = 0.10, lower.tail = F)
# 어떤 약물의 치료 성공률이 10% 이다. 환자 100명이 이 약물로 치료를 받았을 때, 이 치료 약물이 성공하는 사람이 15명 이상일 확률을 구하시오.
pbinom(q = 15, size = 100, prob = 0.10, lower.tail = F)
sample_drug = rbinom(1000, 100, prob = 0.1)
plot(density(sample_drug))
#| echo: TRUE
#| eval: FALSE
1 + 1
plot(cars)
q()
df = read.csv("data/wisconsin_data.csv")
getwd()
setwd("~/Dropbox/Github/datamed/data")
setwd("~/Dropbox/Github/datamed")
df = read.csv("data/wisconsin_data.csv")
head(df)
names(df)
df = df[,-c(1,33)]
names(df)
summary(df)
head(df$diagnosis)
df$diagnosis = factor(df$diagnosis)
?df
?glm
lr_model = glm(diagnosis ~ ., data = df, family = "binomial")
dim(df)
?predict
summary(lr_model)
lr_model
?predict
pred = predict(lr_model, newdata = df)
head(pred)
pred = predict(lr_model, newdata = df, type = "response")
head(pred)
levels(df$diagnosis)
prob = predict(lr_model, newdata = df, type = "response")
pred = rep("B", length(pred))
pred = pred[prob>0.5]
head(pred)
table(pred)
prob = predict(lr_model, newdata = df, type = "response")
pred = rep("B", length(pred))
prob = predict(lr_model, newdata = df, type = "response")
pred = rep("B", length(pred))
pred[prob>0.5] = "M"
head(pred)
table(Pred)
table(pred)
mean(pred == df$diagnosis)
head(pred)
head(df$diagnosis)
df = read.csv("data/wisconsin_data.csv")
df = df[,-c(1,33)]
lr_model = glm(diagnosis ~ ., data = df, family = "binomial")
summary(lr_model)
prob = predict(lr_model, newdata = df, type = "response")
pred = rep("B", length(pred))
pred[prob>0.5] = "M"
mean(pred == df$diagnosis)
conf_matrix = cbind(diag = df$diagnosis, pred = pred)
table(conf_matrix)
head(conf_matrix)
table(conf_matrix$diag, conf_matrix$pred)
table(pred, df$diagnosis)
df = read.csv("data/wisconsin_data.csv")
df = df[,-c(1,33)]
lr_model = glm(diagnosis ~ ., data = df, family = "binomial")
summary(lr_model)
library(sjPlot)
plot_model(lr_model, sort.est = T)
plot_model(lr_model, sort.est = T)
library(sjPlot)
plot_model(lr_model, sort.est = T)
exp(coef(lr_model)[2])
exp(coef(lr_model))
lda_model = lda(diagnosis ~ ., data = df)
library(MASS)
lda_model = lda(diagnosis ~ ., data = df)
lda_model
plot(lda_model)
prob = predict(lr_model, newdata = df, type = "response")
plot(lda_model)
prob = predict(lda_fit, newdata = df, type = "response")
lda_fit = lda(diagnosis ~ ., data = df)
plot(lda_fit)
prob = predict(lda_fit, newdata = df, type = "response")
pred = rep("B", length(pred))
pred[prob>0.5] = "M"
pred = predict(lda_fit, newdata = df, type = "response")
pred = predict(lda_fit, newdata = df)
names(pred)
head(pred)
pred = pred$class
pred = rep("B", length(pred))
pred[prob>0.5] = "M"
pred = predict(lda_fit, newdata = df)
pred = pred$class
head(pred)
pred = predict(lda_fit, newdata = df)
pred = pred$class
mean(pred == df$diagnosis)
table(pred, df$diagnosis)
df = read.csv("data/diabetes.csv")
head(df)
str(df)
# logistic regression
lr_fit = glm(Outcome ~ ., data = df, family = "binomial")
summary(lr_fit)
exp(coef(lr_fit))
library(sjPlot)
plot_model(lr_fit)
plot_model(lr_fit)
# linear discriminant analysis
library(MASS)
plot_model(lr_fit)
exp(coef(lr_fit))
# linear discriminant analysis
library(MASS)
prob = predict(lr_fit, newdata = df, type = "response")
pred = rep(0, length(prob))
pred[prob > 0.5] = 1
table(pred, df$Outcome)
mean(pred == df$Outcome)
lda_fit = lda(Outcome ~ ., data = df)
plot(lda_fit)
pred = predict(lda_fit, newdata = df)
pred = pred$class
mean(pred == df$diagnosis)
table(pred, df$diagnosis)
pred = pred$class
mean(pred == df$Outcome)
table(pred, df$Outcome)
q()
